import json

from advising.llm import Advisor
from config import REPORT_DIR
from exploit.metasploit import ExploitManager
from recon.async_scanner import NetworkScanner
from utils.logger import Logger

class PenetrationTester:
    """
    A class representing a Penetration Tester which combines the functionality of a NetworkScanner and an ExploitManager.

    Attributes:
    target_subnets (list): A list of subnets to be scanned.
    scanner (NetworkScanner): An instance of NetworkScanner to perform network scans on the target subnets.
    exploit_manager (ExploitManager): An instance of ExploitManager to find and manage exploits for discovered services.
    """
    def __init__(self, target_subnets):
        self.target_subnets = target_subnets
        self.scanner = NetworkScanner(target_subnets)
        self.exploit_manager = ExploitManager()
        self.logger = Logger(__name__).get_logger()

    def scan_and_report(self):
        """
        Performs scanning on target subnets, exploits the targets and prepares a report for each discovered service.
        """
        self.logger.info("Starting scan and report process.")
        for result in self.scanner.execute_scan():
            target = {'host': result['host'], 'port': result['port']}
            title = ' '.join([result['product'] or result['name'], result['version']]).strip()
            self.logger.info(f"Trying exploits for target: {result['host']}:{result['port']}, {title}")
            exploits = self.exploit_manager.exploit_target(target, result['product'] or result['name'],
                                                           result['version'])

            advisor = Advisor(
                discovery_result=json.dumps(result),
                title=title,
                exploits=exploits
            )

            report_file = REPORT_DIR / f"{title}.html"
            self.logger.info(f"Preparing report and saving to {report_file}")
            with report_file.open("w") as f:
                f.write(advisor.prepare_report())
